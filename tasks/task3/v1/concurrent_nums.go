package main

import (
	"fmt"
	"sync"
)

/*
Дана последовательность чисел: 2,4,6,8,10. Найти сумму их
квадратов(2^2+3^2+4^2….) с использованием конкурентных вычислений.
*/
/*
Первое решение (небезопасное): при малом кол-ве элементов массива,
есть вероятнось, что поток успеет считать значение накопителья(sum),
после этого второй поток считает накопитель, увеличит и присвоит новое значение,
после чего первый поток присвоит уже старое значение, в результате чего итоговое значение будет некорректно
*/
func main() {
	// объявляем слайс
	nums := []int{2, 4, 6, 8, 10}
	// переменная для суммы
	var sum int

	// объявляем WaitGroup для синхронизации горутин
	wg := sync.WaitGroup{}

	// цикл для прохода по слайсу
	for _, value := range nums {
		// увеличиваем счетчик на 1 перед запуском горутины
		wg.Add(1)
		// Запускаем в горутине анонимную функции. Входной параметр - int
		go func(v int) {
			// с помощью defer объявляем о том что нужно уменьшить счетчик на 1 после завершения горутины
			defer wg.Done()
			// прибавляю в sum квадрат v
			sum += v * v
		}(value)
	}
	// Методом Wait дожидаемся завершения всех горутин
	wg.Wait()
	// выводим сумму
	fmt.Println(sum)
}
