package main

import (
	"fmt"
	"sync"
)

/*
Дана последовательность чисел: 2,4,6,8,10. Найти сумму их
квадратов(2^2+3^2+4^2….) с использованием конкурентных вычислений.
*/

/*
Второе решение (безопасное): используется Mutex, чтобы когда одна горутина
захватывает значение накопителя, вторая горутина ожидала освобождения Mutex, чтобы произвести чтение и записть.
В этом случае накопитель будет изменяться корректно
*/
func main() {
	// объявляем слайс
	nums := []int{2, 4, 6, 8, 10}
	// переменная для суммы
	var sum int

	// объявляем WaitGroup для синхронизации горутин
	wg := sync.WaitGroup{}

	mutex := sync.Mutex{}

	// цикл для прохода по слайсу
	for _, value := range nums {
		// увеличиваем счетчик на 1 перед запуском горутины
		wg.Add(1)
		// запуск горутины. Входной параметр - int
		go func(v int) {
			// заранее высчитываем значение, чтобы не тратить лишнее время на рассчеты во время блокировки мьютексом
			tmp := v * v
			// блокируем Mutex
			mutex.Lock()
			sum += tmp
			// освобождаем Mutex
			mutex.Unlock()
			// уменьшаем счетчик на 1 после завершения горутины
			wg.Done()
		}(value)
	}
	// Вызываем метод Wait, чтобы дождаться завершения всех горутин
	wg.Wait()
	// выводим сумму
	fmt.Println(sum)
}
