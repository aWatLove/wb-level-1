package main

import (
	"fmt"
	"sync"
)

/*
Разработать конвейер чисел. Даны два канала: в первый пишутся числа (x) из
массива, во второй — результат операции x*2, после чего данные из второго
канала должны выводиться в stdout.
*/
func main() {
	arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} // объявляем массив чисел
	inputCh := make(chan int, len(arr))         // буф. канал в который будут передаваться данные из массива
	outputCh := make(chan int, len(arr))        // буф. канал в который будет передаваться результат операции x^2

	var wg sync.WaitGroup // объявляем WaitGroup для синхронизации горутин

	wg.Add(1)   // увеличиваем счетчик перед запуском горутины
	go func() { // запуск горутины
		for _, e := range arr { //перебираем данные из массива и передаем в канал inputCh
			inputCh <- e
		}
		close(inputCh) // закрываем канал
		wg.Done()      // уменьшаем счетчик на 1 перед завершением горутины
	}()

	wg.Add(1)   // увеличиваем счетчик перед запуском горутины
	go func() { // запуск горутины
		for val := range inputCh { // получаем данные из канала в цикле
			outputCh <- val * val // передаем результат операции в канал outputCh
		}
		close(outputCh) // закрываем канал
		wg.Done()       // уменьшаем счетчик на 1 перед завершением горутины
	}()

	// считываем с канала outputCh данные и выводим в консоль
	for val := range outputCh {
		fmt.Println(val)
	}

	// Ожидаем завершения всех горутин
	wg.Wait()
}
